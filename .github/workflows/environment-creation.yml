name: Environment Creation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  create-environment:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.body, 'environment:')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
      
      - name: Extract PR Information
        id: extract
        run: |
          # Extract environment configuration from PR body
          ENV_CONFIG=$(echo "${{ github.event.pull_request.body }}" | sed -n '/```yaml/,/```/p' | sed '1d;$d')
          
          # Parse TTL
          TTL=$(echo "$ENV_CONFIG" | grep "ttl:" | awk '{print $2}')
          
          # Parse services
          SERVICES=$(echo "$ENV_CONFIG" | grep "services:" -A 10 | grep "-" | awk '{print $2}' | tr '\n' ',' | sed 's/,$//')
          
          # Parse resources
          RESOURCES=$(echo "$ENV_CONFIG" | grep "resources:" -A 10)
          
          # Create environment name from PR author
          ENV_NAME="env-${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.number }}"
          
          echo "ttl=$TTL" >> $GITHUB_OUTPUT
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "env_name=$ENV_NAME" >> $GITHUB_OUTPUT
      
      - name: Create ArgoCD Application
        run: |
          # Create namespace for the environment
          kubectl create namespace ${{ steps.extract.outputs.env_name }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Create ArgoCD application
          cat <<EOF | kubectl apply -f -
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ steps.extract.outputs.env_name }}
            namespace: argocd
            annotations:
              argocd.argoproj.io/ttl: ${{ steps.extract.outputs.ttl }}
          spec:
            project: default
            source:
              repoURL: ${{ github.server_url }}/${{ github.repository }}
              targetRevision: ${{ github.event.pull_request.head.ref }}
              path: gitops/charts/unified-app
            destination:
              server: https://kubernetes.default.svc
              namespace: ${{ steps.extract.outputs.env_name }}
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
            helm:
              values: |
                global:
                  environment: ${{ steps.extract.outputs.env_name }}
                  ttl:
                    enabled: true
                    duration: "${{ steps.extract.outputs.ttl }}"
                nestjs-api:
                  enabled: ${{ contains(steps.extract.outputs.services, 'nestjs-api') }}
                vue-frontend:
                  enabled: ${{ contains(steps.extract.outputs.services, 'vue-frontend') }}
                prestashop:
                  enabled: ${{ contains(steps.extract.outputs.services, 'prestashop') }}
                mysql:
                  enabled: ${{ contains(steps.extract.outputs.services, 'mysql') }}
                redis:
                  enabled: ${{ contains(steps.extract.outputs.services, 'redis') }}
          EOF
      
      - name: Add Comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Environment created successfully!
              
              **Environment Name:** \`${{ steps.extract.outputs.env_name }}\`
              **TTL:** \`${{ steps.extract.outputs.ttl }}\`
              **Services:** \`${{ steps.extract.outputs.services }}\`
              
              The environment will be automatically deleted after the specified TTL.`
            }) 